#!/usr/bin/env node
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const path = require("path")
const fs = require("fs")
const execFileSync = require('child_process').execFileSync;

// write a file creating intermediate directories
function write_file(file, body, executable) {
  fs.mkdirSync(path.dirname(file), { recursive: true })
  fs.writeFileSync(file, body)
  if (executable) {
    fs.chmodSync(file, 0o755)
  }
}

// copy a file eventually replacing a substring
function copy_replace(src, dst, match, replacement) {
  let body = fs.readFileSync(src, "utf-8")
  if (match) {
    body = body.replace(match, replacement)
  }
  write_file(dst, body)
}

function deext(filename) {
  const pos = filename.lastIndexOf(".")
  filename = pos > -1 ? filename.substring(0, pos) : filename
  return filename
}

// resolve dependencies from package.json - return the main file
function dependencies(src_dir, main_func) {
  const pkg_config = src_dir + "/package.json"
  const node_modules = src_dir + "/node_modules"
  const main_file = src_dir + "/" + main_func + ".js"
  if (fs.existsSync(pkg_config)) {
    if (!fs.existsSync(node_modules)) {
      execFileSync("yarn", [], {
        "cwd": src_dir
      })
    }
    const config = JSON.parse(fs.readFileSync(pkg_config, "utf-8"))
    if ("main" in config) {
      return deext(config["main"])
    }
  }
  if (fs.existsSync(main_file)) {
    return main_func;
  }
  return "index"
}

// assemble sources
function sources(lib, launcher, main_file, src_dir) {
  fs.cpSync(lib, src_dir + "/lib", {recursive: true})
  let src_file = src_dir + "/" + main_file + ".js"
  fs.appendFileSync(src_file, "\n\nmodule.exports.process = process;")

  // copy launcher and replace main
  copy_replace(launcher,
      src_dir + "/exec__.js",
      'require("main__")',
      'require("./' + main_file + '")')
}

function build(src_dir, bin_dir) {
  try {
    fs.rmSync(bin_dir, {force: true, recursive: true})
    fs.mkdirSync(bin_dir, {recursive: true})
    fs.renameSync(src_dir, bin_dir)
  } catch (err) {
    console.log("syntax error:", err.message)
  } finally {
    write_file(bin_dir + "/exec",
        '#!/bin/bash\n' +
        'cd "$(dirname $0)"\n' +
        'node exec__.js "$@"\n', true)
  }
}

function compile() {
  if (process.argv.length < 4) {
    console.log("usage: <main-function> <source-dir> <target-dir>")
    process.exit(1)
  }
  const launcher = path.dirname(path.dirname(process.argv[1])) + "/nodejs/launcher.js"
  const lib = path.dirname(path.dirname(process.argv[1])) + "/nodejs/lib"
  const src_dir = path.resolve(process.argv[3])
  const bin_dir = path.resolve(process.argv[4])
  let main_func = process.argv[2]
  let main_file = dependencies(src_dir, main_func)
  sources(lib, launcher, main_file, src_dir)
  build(src_dir, bin_dir)
}

if (require.main === module) {
  compile()
}
