#!/usr/bin/env python3
"""Golang Action Compiler
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
from __future__ import print_function
import os, os.path, sys, re, shutil, subprocess, traceback, codecs
from os.path import dirname, exists
from time import sleep

def sources(launcher, source_dir, main):
    func = "Process"
    if main != "." and main != "main":
      func = main + ".Process"

    dst = "%s/main__.go" % source_dir
    if os.path.isdir("%s/main" % source_dir):
        dst = "%s/main/main__.go" % source_dir
    with codecs.open(dst, 'w', 'utf-8') as d:
        with codecs.open(launcher, 'r', 'utf-8') as e:
            code = e.read()
            code = code.replace("MainMethod", func)
            d.write(code)

def build(source_dir, target_dir):
    # compile...
    source_dir = os.path.abspath(source_dir)
    parent = dirname(source_dir)
    target = os.path.abspath("%s/exec" % target_dir)

    env = {
      "GOROOT": "/opt/homebrew/Cellar/go/1.19/libexec",
      "GOPATH": "/Users/pengcheng/go",
      "PATH": os.environ["PATH"],
      "GOCACHE": "/tmp",
      "GO111MODULE": "on"
    }

    gomod = "%s/go.mod" % source_dir
    with open(os.devnull, "w") as dn:
        if exists(gomod):
            ret = subprocess.call(["go", "mod", "download"], cwd=source_dir, env=env, stderr=dn, stdout=dn)
            if ret != 0:
                print("cannot download modules")
                return
        else:
            ret = subprocess.call(["go", "mod", "init", "exec"], cwd=source_dir, env=env, stdout=dn, stderr=dn)
            if ret != 0:
                print("cannot init modules")
                return

    gobuild = ["go", "build", "-o", target, "-ldflags", "-s", "-ldflags", "-w"]
    ret = subprocess.run(gobuild, cwd=source_dir, env=env, universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if ret.returncode != 0:
        print("failed", " ".join(gobuild), "\nin", source_dir, "\nenv", env)
        print("==== stdout is %s" % ret.stdout)
        print("==== stderr is %s" % ret.stderr)
        sys.exit(1)

def main(argv):
    if len(argv) < 4:
        print("usage: <main-file> <source-dir> <target-dir>")
        sys.exit(1)

    main = argv[1]
    source_dir = argv[2]
    target_dir = argv[3]
    launcher = dirname(dirname(argv[0]))+"/golang/launcher.go"
    sources(launcher, source_dir, main)
    build(source_dir, target_dir)

if __name__ == '__main__':
    main(sys.argv)